# Pro-Forma Analytics Tool - Production Docker Compose Configuration
version: '3.8'

services:
  # Main API Service
  proforma-api:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: proforma-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - PRO_FORMA_ENV=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=${API_WORKERS:-4}
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required}
      - FRED_API_KEY=${FRED_API_KEY}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/proforma_production.db}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-1000}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - proforma-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cache and Session Store
  redis:
    image: redis:7.2-alpine
    container_name: proforma-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - proforma-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL Database (Production Alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: proforma-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-proforma_analytics}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups:rw
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-proforma_analytics}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - proforma-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    profiles:
      - postgres

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: proforma-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - proforma-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: proforma-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - proforma-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: proforma-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - proforma-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - proforma-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:2.9.0
    container_name: proforma-loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki:/etc/loki:ro
    restart: unless-stopped
    networks:
      - proforma-network
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: proforma-backup
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-"0 2 * * *"}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./data:/app/data:ro
      - ./backups:/app/backups:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    depends_on:
      - proforma-api
    networks:
      - proforma-network
    profiles:
      - backup

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  proforma-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16